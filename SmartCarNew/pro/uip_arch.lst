C51 COMPILER V8.02   UIP_ARCH                                                              01/29/2018 14:30:32 PAGE 1   


C51 COMPILER V8.02, COMPILATION OF MODULE UIP_ARCH
OBJECT MODULE PLACED IN ..\debug\uip_arch.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\code\uip_arch.c LARGE BROWSE DEBUG OBJECTEXTEND PRINT(.\uip_arch.lst) TA
                    -BS(2) OBJECT(..\debug\uip_arch.obj)

line level    source

   1          #include "uip.h"
   2          #include "uip_arch.h"
   3          
   4          #define BUF ((uip_tcpip_hdr *)&uip_buf[UIP_LLH_LEN])
   5          #define IP_PROTO_TCP  6
   6          
   7          void uip_add32(u8_t *op32, u16_t op16)
   8          {
   9   1        uip_acc32[3] = op32[3] + (op16 & 0xff);
  10   1        uip_acc32[2] = op32[2] + (op16 >> 8);
  11   1        uip_acc32[1] = op32[1];
  12   1        uip_acc32[0] = op32[0];
  13   1        
  14   1        if(uip_acc32[2] < (op16 >> 8)) 
  15   1        {
  16   2          ++uip_acc32[1];
  17   2          if(uip_acc32[1] == 0) 
  18   2          {
  19   3            ++uip_acc32[0];
  20   3          }
  21   2        }
  22   1      
  23   1        if(uip_acc32[3] < (op16 & 0xff)) 
  24   1        {
  25   2          ++uip_acc32[2];  
  26   2          if(uip_acc32[2] == 0) 
  27   2          {
  28   3            ++uip_acc32[1];    
  29   3            if(uip_acc32[1] == 0) 
  30   3            {
  31   4              ++uip_acc32[0];
  32   4            }
  33   3          }
  34   2        }
  35   1      }
  36          
  37          u16_t uip_chksum(u16_t *sdata, u16_t len)
  38          {
  39   1        u16_t acc;
  40   1        for(acc = 0; len > 1; len -= 2) 
  41   1        {
  42   2          acc += *sdata;
  43   2          if(acc < *sdata) 
  44   2          {
  45   3            /* Overflow, so we add the carry to acc (i.e., increase by one). */
  46   3            ++acc;
  47   3          }
  48   2          ++sdata;
  49   2        }
  50   1      
  51   1        /* add up any odd byte */
  52   1        if(len == 1) 
  53   1        {
  54   2          acc += htons(((u16_t)(*(u8_t *)sdata)) << 8);
C51 COMPILER V8.02   UIP_ARCH                                                              01/29/2018 14:30:32 PAGE 2   

  55   2          if(acc < htons(((u16_t)(*(u8_t *)sdata)) << 8)) 
  56   2          {
  57   3            ++acc;
  58   3          }
  59   2        }
  60   1        return acc;
  61   1      }
  62          
  63          u16_t uip_ipchksum(void)
  64          {
  65   1        return uip_chksum((u16_t *)&uip_buf[UIP_LLH_LEN], 20);
  66   1      }
  67          
  68          u16_t uip_tcpchksum(void)
  69          {
  70   1        u16_t hsum, sum;  
  71   1        /* Compute the checksum of the TCP header. */
  72   1        hsum = uip_chksum((u16_t *)&uip_buf[20 + UIP_LLH_LEN], 20);
  73   1      
  74   1        /* Compute the checksum of the data in the TCP packet and add it to the TCP header checksum. */
  75   1        sum = uip_chksum((u16_t *)uip_appdata,(u16_t)(((((u16_t)(BUF->len[0]) << 8) + BUF->len[1]) - 40)));
  76   1        if((sum += hsum) < hsum) 
  77   1        {
  78   2          ++sum;
  79   2        }
  80   1        
  81   1        if((sum += BUF->srcipaddr[0]) < BUF->srcipaddr[0]) 
  82   1        {
  83   2          ++sum;
  84   2        }
  85   1        if((sum += BUF->srcipaddr[1]) < BUF->srcipaddr[1]) 
  86   1          {
  87   2          ++sum;
  88   2        }
  89   1        if((sum += BUF->destipaddr[0]) < BUF->destipaddr[0]) 
  90   1        {
  91   2          ++sum;
  92   2        }
  93   1        if((sum += BUF->destipaddr[1]) < BUF->destipaddr[1]) 
  94   1        {
  95   2          ++sum;
  96   2        }
  97   1        if((sum += (u16_t)htons((u16_t)IP_PROTO_TCP)) < (u16_t)htons((u16_t)IP_PROTO_TCP)) 
  98   1        {
  99   2          ++sum;
 100   2        }
 101   1      
 102   1        hsum = (u16_t)htons((((u16_t)(BUF->len[0]) << 8) + BUF->len[1]) - 20);
 103   1        
 104   1        if((sum += hsum) < hsum) 
 105   1        {
 106   2          ++sum;
 107   2        }
 108   1        return sum;
 109   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    744    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      13
   PDATA SIZE       =   ----    ----
C51 COMPILER V8.02   UIP_ARCH                                                              01/29/2018 14:30:32 PAGE 3   

   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
