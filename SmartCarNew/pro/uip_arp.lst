C51 COMPILER V8.02   UIP_ARP                                                               01/29/2018 14:30:32 PAGE 1   


C51 COMPILER V8.02, COMPILATION OF MODULE UIP_ARP
OBJECT MODULE PLACED IN ..\debug\uip_arp.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\code\uip_arp.c LARGE BROWSE DEBUG OBJECTEXTEND PRINT(.\uip_arp.lst) TABS
                    -(2) OBJECT(..\debug\uip_arp.obj)

line level    source

   1          /**
   2           * The Address Resolution Protocol ARP is used for mapping between IP
   3           * addresses and link level addresses such as the Ethernet MAC
   4           * addresses. ARP uses broadcast queries to ask for the link level
   5           * address of a known IP address and the host which is configured with
   6           * the IP address for which the query was meant, will respond with its
   7           * link level address.
   8           *
   9           * \note This ARP implementation only supports Ethernet.
  10           */
  11           
  12          /**
  13           * \file
  14           * Implementation of the ARP Address Resolution Protocol.
  15           * \author Adam Dunkels <adam@dunkels.com>
  16           *
  17           */
  18          
  19          #include "uip_arp.h"
  20          
  21          #include <string.h>
  22          
  23          struct arp_hdr {
  24            struct uip_eth_hdr ethhdr;
  25            u16_t hwtype;
  26            u16_t protocol;
  27            u8_t hwlen;
  28            u8_t protolen;
  29            u16_t opcode;
  30            struct uip_eth_addr shwaddr;
  31            u16_t sipaddr[2];
  32            struct uip_eth_addr dhwaddr;
  33            u16_t dipaddr[2]; 
  34          };
  35          
  36          struct ethip_hdr {
  37            struct uip_eth_hdr ethhdr;
  38            /* IP header. */
  39            u8_t vhl,
  40            tos,
  41            len[2],
  42            ipid[2],
  43            ipoffset[2],
  44            ttl,
  45            proto;
  46            u16_t ipchksum;
  47            u16_t srcipaddr[2],
  48            destipaddr[2];
  49          };
  50          
  51          #define ARP_REQUEST 1
  52          #define ARP_REPLY   2
  53          
  54          #define ARP_HWTYPE_ETH 1
C51 COMPILER V8.02   UIP_ARP                                                               01/29/2018 14:30:32 PAGE 2   

  55          
  56          struct arp_entry 
  57          {
  58            u16_t ipaddr[2];
  59            struct uip_eth_addr ethaddr;
  60            u8_t time;
  61          };
  62          
  63          struct uip_eth_addr uip_ethaddr = 
  64          {
  65            {
  66              UIP_ETHADDR0,
  67              UIP_ETHADDR1,
  68              UIP_ETHADDR2,
  69              UIP_ETHADDR3,
  70              UIP_ETHADDR4,
  71              UIP_ETHADDR5
  72            }
  73          };
  74          
  75          static struct arp_entry arp_table[UIP_ARPTAB_SIZE];
  76          static u16_t ipaddr[2];
  77          static u8_t i, c;
  78          
  79          static u8_t arptime;
  80          static u8_t tmpage;
  81          
  82          #define BUF   ((struct arp_hdr *)&uip_buf[0])
  83          #define IPBUF ((struct ethip_hdr *)&uip_buf[0])
  84          
  85          //Initialize the ARP module.
  86          void uip_arp_init(void)
  87          {
  88   1        for(i = 0; i < UIP_ARPTAB_SIZE; ++i) 
  89   1        {
  90   2          memset(arp_table[i].ipaddr, 0, 4);
  91   2        }
  92   1      }
  93          
  94          /*
  95           * Periodic ARP processing function.
  96           *
  97           * This function performs periodic timer processing in the ARP module
  98           * and should be called at regular intervals. The recommended interval
  99           * is 10 seconds between the calls.
 100          */
 101          void uip_arp_timer(void)
 102          {
 103   1        struct arp_entry *tabptr;
 104   1        ++arptime;
 105   1        for(i = 0; i < UIP_ARPTAB_SIZE; ++i) 
 106   1        {
 107   2          tabptr = &arp_table[i];
 108   2          if((tabptr->ipaddr[0] | tabptr->ipaddr[1]) != 0 && arptime - tabptr->time >= UIP_ARP_MAXAGE) 
 109   2          {
 110   3            memset(tabptr->ipaddr, 0, 4);
 111   3          }
 112   2        }
 113   1      }
 114          
 115          static void uip_arp_update(u16_t *ipaddr, struct uip_eth_addr *ethaddr)
 116          {
C51 COMPILER V8.02   UIP_ARP                                                               01/29/2018 14:30:32 PAGE 3   

 117   1        register struct arp_entry *tabptr;
 118   1        /* Walk through the ARP mapping table and try to find an entry to
 119   1           update. If none is found, the IP -> MAC address mapping is
 120   1           inserted in the ARP table. */
 121   1        for(i = 0; i < UIP_ARPTAB_SIZE; ++i) 
 122   1        {
 123   2          tabptr = &arp_table[i];
 124   2          /* Only check those entries that are actually in use. */
 125   2          if(tabptr->ipaddr[0] != 0 && tabptr->ipaddr[1] != 0) 
 126   2          {
 127   3            /* Check if the source IP address of the incoming packet matches
 128   3              the IP address in this ARP table entry. */
 129   3            if(ipaddr[0] == tabptr->ipaddr[0] && ipaddr[1] == tabptr->ipaddr[1]) 
 130   3            {
 131   4         
 132   4              /* An old entry found, update this and return. */
 133   4              memcpy(tabptr->ethaddr.addr, ethaddr->addr, 6);
 134   4              tabptr->time = arptime;
 135   4              return;
 136   4            }
 137   3          }
 138   2        }
 139   1      
 140   1          /* If we get here, no existing ARP table entry was found, so we
 141   1          create one. */
 142   1      
 143   1        /* First, we try to find an unused entry in the ARP table. */
 144   1        for(i = 0; i < UIP_ARPTAB_SIZE; ++i) 
 145   1        {
 146   2          tabptr = &arp_table[i];
 147   2          if(tabptr->ipaddr[0] == 0 && tabptr->ipaddr[1] == 0) 
 148   2          {
 149   3            break;
 150   3          }
 151   2        }
 152   1      
 153   1        /* If no unused entry is found, we try to find the oldest entry and
 154   1           throw it away. */
 155   1        if(i == UIP_ARPTAB_SIZE) 
 156   1        {
 157   2          tmpage = 0;
 158   2          c = 0;
 159   2          for(i = 0; i < UIP_ARPTAB_SIZE; ++i) 
 160   2          {
 161   3            tabptr = &arp_table[i];
 162   3            if(arptime - tabptr->time > tmpage) 
 163   3            {
 164   4              tmpage = arptime - tabptr->time;
 165   4              c = i;
 166   4            }
 167   3          }
 168   2          i = c;
 169   2        }
 170   1      
 171   1        /* Now, i is the ARP table entry which we will fill with the new information. */
 172   1        memcpy(tabptr->ipaddr, ipaddr, 4);
 173   1        memcpy(tabptr->ethaddr.addr, ethaddr->addr, 6);
 174   1        tabptr->time = arptime;
 175   1      }
 176          
 177          /*-----------------------------------------------------------------------------------*/
 178          /**
C51 COMPILER V8.02   UIP_ARP                                                               01/29/2018 14:30:32 PAGE 4   

 179           * ARP processing for incoming IP packets
 180           *
 181           * This function should be called by the device driver when an IP
 182           * packet has been received. The function will check if the address is
 183           * in the ARP cache, and if so the ARP cache entry will be
 184           * refreshed. If no ARP cache entry was found, a new one is created.
 185           *
 186           * This function expects an IP packet with a prepended Ethernet header
 187           * in the uip_buf[] buffer, and the length of the packet in the global
 188           * variable uip_len.
 189           */
 190          /*-----------------------------------------------------------------------------------*/
 191          void uip_arp_ipin(void)
 192          {
 193   1        uip_len -= sizeof(struct uip_eth_hdr);
 194   1        
 195   1        /* Only insert/update an entry if the source IP address of the
 196   1           incoming IP packet comes from a host on the local network. */
 197   1        if((IPBUF->srcipaddr[0] & uip_arp_netmask[0]) != (uip_hostaddr[0] & uip_arp_netmask[0])) 
 198   1        {
 199   2          return;
 200   2        }
 201   1        if((IPBUF->srcipaddr[1] & uip_arp_netmask[1]) != (uip_hostaddr[1] & uip_arp_netmask[1])) 
 202   1        {
 203   2          return;
 204   2        }
 205   1        uip_arp_update(IPBUF->srcipaddr, &(IPBUF->ethhdr.src));
 206   1        return;
 207   1      }
 208          /*-----------------------------------------------------------------------------------*/
 209          /**
 210           * ARP processing for incoming ARP packets.
 211           *
 212           * This function should be called by the device driver when an ARP
 213           * packet has been received. The function will act differently
 214           * depending on the ARP packet type: if it is a reply for a request
 215           * that we previously sent out, the ARP cache will be filled in with
 216           * the values from the ARP reply. If the incoming ARP packet is an ARP
 217           * request for our IP address, an ARP reply packet is created and put
 218           * into the uip_buf[] buffer.
 219           *
 220           * When the function returns, the value of the global variable uip_len
 221           * indicates whether the device driver should send out a packet or
 222           * not. If uip_len is zero, no packet should be sent. If uip_len is
 223           * non-zero, it contains the length of the outbound packet that is
 224           * present in the uip_buf[] buffer.
 225           *
 226           * This function expects an ARP packet with a prepended Ethernet
 227           * header in the uip_buf[] buffer, and the length of the packet in the
 228           * global variable uip_len.
 229           */
 230          /*-----------------------------------------------------------------------------------*/
 231          void uip_arp_arpin(void)
 232          {
 233   1        if(uip_len < sizeof(struct arp_hdr)) 
 234   1        {
 235   2          uip_len = 0;
 236   2          return;
 237   2        }
 238   1      
 239   1        uip_len = 0;
 240   1        
C51 COMPILER V8.02   UIP_ARP                                                               01/29/2018 14:30:32 PAGE 5   

 241   1        switch(BUF->opcode) 
 242   1        {
 243   2          case HTONS(ARP_REQUEST):
 244   2            /* ARP request. If it asked for our address, we send out a reply. */
 245   2            if(BUF->dipaddr[0] == uip_hostaddr[0] && BUF->dipaddr[1] == uip_hostaddr[1]) 
 246   2            {
 247   3              /* The reply opcode is 2. */
 248   3              BUF->opcode = HTONS(2);
 249   3      
 250   3              memcpy(BUF->dhwaddr.addr, BUF->shwaddr.addr, 6);
 251   3              memcpy(BUF->shwaddr.addr, uip_ethaddr.addr, 6);
 252   3              memcpy(BUF->ethhdr.src.addr, uip_ethaddr.addr, 6);
 253   3              memcpy(BUF->ethhdr.dest.addr, BUF->dhwaddr.addr, 6);
 254   3      
 255   3              BUF->dipaddr[0] = BUF->sipaddr[0];
 256   3              BUF->dipaddr[1] = BUF->sipaddr[1];
 257   3              BUF->sipaddr[0] = uip_hostaddr[0];
 258   3              BUF->sipaddr[1] = uip_hostaddr[1];
 259   3      
 260   3              BUF->ethhdr.type = HTONS(UIP_ETHTYPE_ARP);      
 261   3              uip_len = sizeof(struct arp_hdr);
 262   3            }
 263   2            break;
 264   2          case HTONS(ARP_REPLY):
 265   2            /* ARP reply. We insert or update the ARP table if it was meant for us. */
 266   2            if(BUF->dipaddr[0] == uip_hostaddr[0] && BUF->dipaddr[1] == uip_hostaddr[1]) 
 267   2            {
 268   3              uip_arp_update(BUF->sipaddr, &BUF->shwaddr);
 269   3            }
 270   2            break;
 271   2        }
 272   1        return;
 273   1      }
 274          
 275          /*-----------------------------------------------------------------------------------*/
 276          /**
 277           * Prepend Ethernet header to an outbound IP packet and see if we need
 278           * to send out an ARP request.
 279           *
 280           * This function should be called before sending out an IP packet. The
 281           * function checks the destination IP address of the IP packet to see
 282           * what Ethernet MAC address that should be used as a destination MAC
 283           * address on the Ethernet.
 284           *
 285           * If the destination IP address is in the local network (determined
 286           * by logical ANDing of netmask and our IP address), the function
 287           * checks the ARP cache to see if an entry for the destination IP
 288           * address is found. If so, an Ethernet header is prepended and the
 289           * function returns. If no ARP cache entry is found for the
 290           * destination IP address, the packet in the uip_buf[] is replaced by
 291           * an ARP request packet for the IP address. The IP packet is dropped
 292           * and it is assumed that they higher level protocols (e.g., TCP)
 293           * eventually will retransmit the dropped packet.
 294           *
 295           * If the destination IP address is not on the local network, the IP
 296           * address of the default router is used instead.
 297           *
 298           * When the function returns, a packet is present in the uip_buf[]
 299           * buffer, and the length of the packet is in the global variable
 300           * uip_len.
 301           */
 302          /*-----------------------------------------------------------------------------------*/
C51 COMPILER V8.02   UIP_ARP                                                               01/29/2018 14:30:32 PAGE 6   

 303          void uip_arp_out(void)
 304          {
 305   1        struct arp_entry *tabptr;
 306   1        /* Find the destination IP address in the ARP table and construct
 307   1           the Ethernet header. If the destination IP addres isn't on the
 308   1           local network, we use the default router's IP address instead.
 309   1      
 310   1           If not ARP table entry is found, we overwrite the original IP
 311   1           packet with an ARP request for the IP address. */
 312   1      
 313   1        /* Check if the destination address is on the local network. */
 314   1        if((IPBUF->destipaddr[0] & uip_arp_netmask[0]) != (uip_hostaddr[0] & uip_arp_netmask[0]) || (IPBUF->desti
             -paddr[1] & uip_arp_netmask[1]) != (uip_hostaddr[1] & uip_arp_netmask[1])) 
 315   1        {
 316   2          /* Destination address was not on the local network, so we need to
 317   2          use the default router's IP address instead of the destination
 318   2          address when determining the MAC address. */
 319   2          ipaddr[0] = uip_arp_draddr[0];
 320   2          ipaddr[1] = uip_arp_draddr[1];
 321   2        } else 
 322   1        {
 323   2          /* Else, we use the destination IP address. */
 324   2          ipaddr[0] = IPBUF->destipaddr[0];
 325   2          ipaddr[1] = IPBUF->destipaddr[1];
 326   2        }
 327   1            
 328   1        for(i = 0; i < UIP_ARPTAB_SIZE; ++i) 
 329   1        {
 330   2          tabptr = &arp_table[i];
 331   2          if(ipaddr[0] == tabptr->ipaddr[0] && ipaddr[1] == tabptr->ipaddr[1])
 332   2            break;
 333   2        }
 334   1      
 335   1        if(i == UIP_ARPTAB_SIZE) 
 336   1        {
 337   2          /* The destination address was not in our ARP table, so we
 338   2          overwrite the IP packet with an ARP request. */
 339   2          memset(BUF->ethhdr.dest.addr, 0xff, 6);
 340   2          memset(BUF->dhwaddr.addr, 0x00, 6);
 341   2          memcpy(BUF->ethhdr.src.addr, uip_ethaddr.addr, 6);
 342   2          memcpy(BUF->shwaddr.addr, uip_ethaddr.addr, 6);
 343   2          
 344   2          BUF->dipaddr[0] = ipaddr[0];
 345   2          BUF->dipaddr[1] = ipaddr[1];
 346   2          BUF->sipaddr[0] = uip_hostaddr[0];
 347   2          BUF->sipaddr[1] = uip_hostaddr[1];
 348   2          BUF->opcode = HTONS(ARP_REQUEST); /* ARP request. */
 349   2          BUF->hwtype = HTONS(ARP_HWTYPE_ETH);
 350   2          BUF->protocol = HTONS(UIP_ETHTYPE_IP);
 351   2          BUF->hwlen = 6;
 352   2          BUF->protolen = 4;
 353   2          BUF->ethhdr.type = HTONS(UIP_ETHTYPE_ARP);
 354   2      
 355   2          uip_appdata = &uip_buf[40 + UIP_LLH_LEN];
 356   2          
 357   2          uip_len = sizeof(struct arp_hdr);
 358   2          return;
 359   2        }
 360   1      
 361   1        /* Build an ethernet header. */
 362   1        memcpy(IPBUF->ethhdr.dest.addr, tabptr->ethaddr.addr, 6);
 363   1        memcpy(IPBUF->ethhdr.src.addr, uip_ethaddr.addr, 6);    
C51 COMPILER V8.02   UIP_ARP                                                               01/29/2018 14:30:32 PAGE 7   

 364   1        IPBUF->ethhdr.type = HTONS(UIP_ETHTYPE_IP);
 365   1        uip_len += sizeof(struct uip_eth_hdr);
 366   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1554    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    102      12
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
